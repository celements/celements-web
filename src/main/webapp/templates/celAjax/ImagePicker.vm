## init Celements variables
$response.setStatus(200)
##only include if legacy celements2web.xar is installed
#if($xwiki.exists($services.model.resolveDocument('celements2web:Macros.initCelements')))
$xwiki.includeForm("celements2web:Macros.initCelements", false)
#end
#set($isAjaxCall = ("$!request.ajax" == '1'))
#if(!$isAjaxCall)
## start a Celements Document
#parse("celMacros/startCelementsDocument.vm")
##
#set($cel_loadAdminMenuBar=false)
$celementsweb.includeCSSPage(':celRes/imagePicker.css')
## start the celements body (and lacily finalise the header)
#parse("celMacros/startCelementsBody.vm")
##
#end

#set($imageOnly = "$!request.images")
#if("$!imageOnly" == '')
  #set($imageOnly = '1')
#end
<script language="javascript">
var baseurl = '$!request.get('baseurl')';
var imgurl = '$!request.get('imgurl')';
var origFieldName = '$!request.get('origFieldName')';

	function insertImage(filename) {
		if (window.opener) {
			window.opener.imagePickerCallback(filename, origFieldName);
			self.close();
		}
	}

  function clickOnFileAction(filename) {
    insertImage(filename);
    return false;
  }

	var preloadImg = new Image();

    //------------------
    // threadsafe asynchronous XMLHTTPRequest code
    function executeCommand(url, callback) {
        // we use a javascript feature here called "inner functions"
        // using these means the local variables retain their values after the outer function
        // has returned. this is useful for thread safety, so
        // reassigning the onreadystatechange function doesn't stomp over earlier requests.
        function ajaxBindCallback() {
            if (ajaxRequest.readyState == 4) {
                if (ajaxRequest.status == 200) {
                    if (ajaxCallback) {
                        ajaxCallback(ajaxRequest.responseText);
                    } else {
                        alert('no callback defined');
                    }
                } else {
                    alert("There was a problem retrieving the xml data:\n" + ajaxRequest.status + ":\t" + ajaxRequest.statusText + "\n" + ajaxRequest.responseText);
                }
            }
        }

        // addMessage(url);
        // use a local variable to hold our request and callback until the inner function is called...
        var ajaxRequest = null;
        var ajaxCallback = callback;

        // bind our callback then hit the server...
        if (window.XMLHttpRequest) {
            // moz et al
            ajaxRequest = new XMLHttpRequest();
            ajaxRequest.onreadystatechange = ajaxBindCallback;
            ajaxRequest.open("GET", url, true);
            ajaxRequest.send(null);
        } else if (window.ActiveXObject) {
            // ie
            ajaxRequest = new ActiveXObject("Microsoft.XMLHTTP");
            if (ajaxRequest) {
                ajaxRequest.onreadystatechange = ajaxBindCallback;
                ajaxRequest.open("GET", url, true);
                ajaxRequest.send();
            }
            else{
                alert("your browser does not support xmlhttprequest" )
            }
        }
        else{
            alert("your browser does not support xmlhttprequest" )
        }
    }

    function loadAttachmentList(baseurl) {
        var url = baseurl + "?xpage=attachwysiwyg&images=$imageOnly";
        executeCommand(url, loadAttachmentListCallback);
    }

    function loadAttachmentListCallback(e) {
      var attachEl = document.getElementById("attachments");
      attachEl.innerHTML = e;
    }

    function updateAttachName(form) {
      form.xredirect.value=location;

      var fname = form.filepath.value;
      if (fname=="") {
        return false;
      }

      var i = fname.lastIndexOf('\\');
      if (i==-1)
       i = fname.lastIndexOf('/');

      fname = fname.substring(i+1);
      if (form.filename.value==fname)
       return true;

      if (form.filename.value=="")
       form.filename.value = fname;
      return true;
    }
</script>
<div id="attachments">

</div>
<script type="text/javascript">
    loadAttachmentList(baseurl);
</script>
#if(!$isAjaxCall)
#parse('celMacros/finaliseCelementsDocument.vm')
#end