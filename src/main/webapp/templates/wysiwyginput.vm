## The XML declaration is commented out to avoid quirks mode in IE6.
##<?xml version="1.0" encoding="$xwiki.encoding" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="$context.language" xml:lang="$context.language">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=$xwiki.encoding" />
## Include the stylesheets that affect the content in view mode.
#template("stylesheets.vm")
## RichTextArea.css overwrites those CSS rules defined in the previous stylesheets that are improper in edit mode.
<link type="text/css" rel="stylesheet" href="$xwiki.getSkinFile("js/xwiki/wysiwyg/xwe/stylesheets/RichTextArea.css", true)"/>
## Include the scripts that affect the content in view mode.
#template("javascript.vm")
</head>
## We don't use directly $tdoc.content because we could loose changes made by the 
## user before switching from wiki editor to wysiwyg or before saving when a 
## conversion exception is thrown.
#set($content = $tdoc.content)
#if($request.key)
  #set($wysiwygInput = $request.getSession().getAttribute("com.xpn.xwiki.wysiwyg.input"))
  #if($wysiwygInput && $wysiwygInput.containsKey($request.key))
    #set($content = $wysiwygInput.get($request.key))
    #set($ok = $wysiwygInput.remove($request.key))
  #end
#end
## We don't always have to render the content:
## * If this template is called after a conversion exception then the content is HTML.
## * If the WYSIWYG is in real time mode then the content must be empty.
#if("$!request.render" == "true")
  ## We render using the Annotated XHTML Renderer since we need the extra metadata in order to be able to do full
  ## Round tripping between HTML and Wiki syntax.
  #set($content = $tdoc.getRenderedContent($content, $tdoc.getSyntaxId(), "annotatedxhtml/1.0"))
#end
<body id="body" class="main">$content</body>
</html>
